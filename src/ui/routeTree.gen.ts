/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SignupImport } from './routes/signup'
import { Route as LogoutImport } from './routes/logout'
import { Route as LoginImport } from './routes/login'
import { Route as AuthedImport } from './routes/_authed'
import { Route as IndexImport } from './routes/index'
import { Route as DevIndexImport } from './routes/dev/index'
import { Route as AuthedTreatmentsIndexImport } from './routes/_authed/treatments/index'
import { Route as AuthedReservationIndexImport } from './routes/_authed/reservation/index'
import { Route as AuthedClientsIndexImport } from './routes/_authed/clients/index'
import { Route as AuthedTreatmentsNewImport } from './routes/_authed/treatments/new'
import { Route as AuthedTreatmentsIdImport } from './routes/_authed/treatments/$id'
import { Route as AuthedReservationNewImport } from './routes/_authed/reservation/new'
import { Route as AuthedReservationIdImport } from './routes/_authed/reservation/$id'
import { Route as AuthedRecordNewImport } from './routes/_authed/record/new'
import { Route as AuthedCustomersIdImport } from './routes/_authed/customers/$id'
import { Route as AuthedClientsNewImport } from './routes/_authed/clients/new'
import { Route as AuthedClientsIdImport } from './routes/_authed/clients/$id'

// Create/Update Routes

const SignupRoute = SignupImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any)

const LogoutRoute = LogoutImport.update({
  id: '/logout',
  path: '/logout',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AuthedRoute = AuthedImport.update({
  id: '/_authed',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DevIndexRoute = DevIndexImport.update({
  id: '/dev/',
  path: '/dev/',
  getParentRoute: () => rootRoute,
} as any)

const AuthedTreatmentsIndexRoute = AuthedTreatmentsIndexImport.update({
  id: '/treatments/',
  path: '/treatments/',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedReservationIndexRoute = AuthedReservationIndexImport.update({
  id: '/reservation/',
  path: '/reservation/',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedClientsIndexRoute = AuthedClientsIndexImport.update({
  id: '/clients/',
  path: '/clients/',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedTreatmentsNewRoute = AuthedTreatmentsNewImport.update({
  id: '/treatments/new',
  path: '/treatments/new',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedTreatmentsIdRoute = AuthedTreatmentsIdImport.update({
  id: '/treatments/$id',
  path: '/treatments/$id',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedReservationNewRoute = AuthedReservationNewImport.update({
  id: '/reservation/new',
  path: '/reservation/new',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedReservationIdRoute = AuthedReservationIdImport.update({
  id: '/reservation/$id',
  path: '/reservation/$id',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedRecordNewRoute = AuthedRecordNewImport.update({
  id: '/record/new',
  path: '/record/new',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedCustomersIdRoute = AuthedCustomersIdImport.update({
  id: '/customers/$id',
  path: '/customers/$id',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedClientsNewRoute = AuthedClientsNewImport.update({
  id: '/clients/new',
  path: '/clients/new',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedClientsIdRoute = AuthedClientsIdImport.update({
  id: '/clients/$id',
  path: '/clients/$id',
  getParentRoute: () => AuthedRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_authed': {
      id: '/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/logout': {
      id: '/logout'
      path: '/logout'
      fullPath: '/logout'
      preLoaderRoute: typeof LogoutImport
      parentRoute: typeof rootRoute
    }
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupImport
      parentRoute: typeof rootRoute
    }
    '/dev/': {
      id: '/dev/'
      path: '/dev'
      fullPath: '/dev'
      preLoaderRoute: typeof DevIndexImport
      parentRoute: typeof rootRoute
    }
    '/_authed/clients/$id': {
      id: '/_authed/clients/$id'
      path: '/clients/$id'
      fullPath: '/clients/$id'
      preLoaderRoute: typeof AuthedClientsIdImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/clients/new': {
      id: '/_authed/clients/new'
      path: '/clients/new'
      fullPath: '/clients/new'
      preLoaderRoute: typeof AuthedClientsNewImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/customers/$id': {
      id: '/_authed/customers/$id'
      path: '/customers/$id'
      fullPath: '/customers/$id'
      preLoaderRoute: typeof AuthedCustomersIdImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/record/new': {
      id: '/_authed/record/new'
      path: '/record/new'
      fullPath: '/record/new'
      preLoaderRoute: typeof AuthedRecordNewImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/reservation/$id': {
      id: '/_authed/reservation/$id'
      path: '/reservation/$id'
      fullPath: '/reservation/$id'
      preLoaderRoute: typeof AuthedReservationIdImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/reservation/new': {
      id: '/_authed/reservation/new'
      path: '/reservation/new'
      fullPath: '/reservation/new'
      preLoaderRoute: typeof AuthedReservationNewImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/treatments/$id': {
      id: '/_authed/treatments/$id'
      path: '/treatments/$id'
      fullPath: '/treatments/$id'
      preLoaderRoute: typeof AuthedTreatmentsIdImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/treatments/new': {
      id: '/_authed/treatments/new'
      path: '/treatments/new'
      fullPath: '/treatments/new'
      preLoaderRoute: typeof AuthedTreatmentsNewImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/clients/': {
      id: '/_authed/clients/'
      path: '/clients'
      fullPath: '/clients'
      preLoaderRoute: typeof AuthedClientsIndexImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/reservation/': {
      id: '/_authed/reservation/'
      path: '/reservation'
      fullPath: '/reservation'
      preLoaderRoute: typeof AuthedReservationIndexImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/treatments/': {
      id: '/_authed/treatments/'
      path: '/treatments'
      fullPath: '/treatments'
      preLoaderRoute: typeof AuthedTreatmentsIndexImport
      parentRoute: typeof AuthedImport
    }
  }
}

// Create and export the route tree

interface AuthedRouteChildren {
  AuthedClientsIdRoute: typeof AuthedClientsIdRoute
  AuthedClientsNewRoute: typeof AuthedClientsNewRoute
  AuthedCustomersIdRoute: typeof AuthedCustomersIdRoute
  AuthedRecordNewRoute: typeof AuthedRecordNewRoute
  AuthedReservationIdRoute: typeof AuthedReservationIdRoute
  AuthedReservationNewRoute: typeof AuthedReservationNewRoute
  AuthedTreatmentsIdRoute: typeof AuthedTreatmentsIdRoute
  AuthedTreatmentsNewRoute: typeof AuthedTreatmentsNewRoute
  AuthedClientsIndexRoute: typeof AuthedClientsIndexRoute
  AuthedReservationIndexRoute: typeof AuthedReservationIndexRoute
  AuthedTreatmentsIndexRoute: typeof AuthedTreatmentsIndexRoute
}

const AuthedRouteChildren: AuthedRouteChildren = {
  AuthedClientsIdRoute: AuthedClientsIdRoute,
  AuthedClientsNewRoute: AuthedClientsNewRoute,
  AuthedCustomersIdRoute: AuthedCustomersIdRoute,
  AuthedRecordNewRoute: AuthedRecordNewRoute,
  AuthedReservationIdRoute: AuthedReservationIdRoute,
  AuthedReservationNewRoute: AuthedReservationNewRoute,
  AuthedTreatmentsIdRoute: AuthedTreatmentsIdRoute,
  AuthedTreatmentsNewRoute: AuthedTreatmentsNewRoute,
  AuthedClientsIndexRoute: AuthedClientsIndexRoute,
  AuthedReservationIndexRoute: AuthedReservationIndexRoute,
  AuthedTreatmentsIndexRoute: AuthedTreatmentsIndexRoute,
}

const AuthedRouteWithChildren =
  AuthedRoute._addFileChildren(AuthedRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AuthedRouteWithChildren
  '/login': typeof LoginRoute
  '/logout': typeof LogoutRoute
  '/signup': typeof SignupRoute
  '/dev': typeof DevIndexRoute
  '/clients/$id': typeof AuthedClientsIdRoute
  '/clients/new': typeof AuthedClientsNewRoute
  '/customers/$id': typeof AuthedCustomersIdRoute
  '/record/new': typeof AuthedRecordNewRoute
  '/reservation/$id': typeof AuthedReservationIdRoute
  '/reservation/new': typeof AuthedReservationNewRoute
  '/treatments/$id': typeof AuthedTreatmentsIdRoute
  '/treatments/new': typeof AuthedTreatmentsNewRoute
  '/clients': typeof AuthedClientsIndexRoute
  '/reservation': typeof AuthedReservationIndexRoute
  '/treatments': typeof AuthedTreatmentsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AuthedRouteWithChildren
  '/login': typeof LoginRoute
  '/logout': typeof LogoutRoute
  '/signup': typeof SignupRoute
  '/dev': typeof DevIndexRoute
  '/clients/$id': typeof AuthedClientsIdRoute
  '/clients/new': typeof AuthedClientsNewRoute
  '/customers/$id': typeof AuthedCustomersIdRoute
  '/record/new': typeof AuthedRecordNewRoute
  '/reservation/$id': typeof AuthedReservationIdRoute
  '/reservation/new': typeof AuthedReservationNewRoute
  '/treatments/$id': typeof AuthedTreatmentsIdRoute
  '/treatments/new': typeof AuthedTreatmentsNewRoute
  '/clients': typeof AuthedClientsIndexRoute
  '/reservation': typeof AuthedReservationIndexRoute
  '/treatments': typeof AuthedTreatmentsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_authed': typeof AuthedRouteWithChildren
  '/login': typeof LoginRoute
  '/logout': typeof LogoutRoute
  '/signup': typeof SignupRoute
  '/dev/': typeof DevIndexRoute
  '/_authed/clients/$id': typeof AuthedClientsIdRoute
  '/_authed/clients/new': typeof AuthedClientsNewRoute
  '/_authed/customers/$id': typeof AuthedCustomersIdRoute
  '/_authed/record/new': typeof AuthedRecordNewRoute
  '/_authed/reservation/$id': typeof AuthedReservationIdRoute
  '/_authed/reservation/new': typeof AuthedReservationNewRoute
  '/_authed/treatments/$id': typeof AuthedTreatmentsIdRoute
  '/_authed/treatments/new': typeof AuthedTreatmentsNewRoute
  '/_authed/clients/': typeof AuthedClientsIndexRoute
  '/_authed/reservation/': typeof AuthedReservationIndexRoute
  '/_authed/treatments/': typeof AuthedTreatmentsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/login'
    | '/logout'
    | '/signup'
    | '/dev'
    | '/clients/$id'
    | '/clients/new'
    | '/customers/$id'
    | '/record/new'
    | '/reservation/$id'
    | '/reservation/new'
    | '/treatments/$id'
    | '/treatments/new'
    | '/clients'
    | '/reservation'
    | '/treatments'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/login'
    | '/logout'
    | '/signup'
    | '/dev'
    | '/clients/$id'
    | '/clients/new'
    | '/customers/$id'
    | '/record/new'
    | '/reservation/$id'
    | '/reservation/new'
    | '/treatments/$id'
    | '/treatments/new'
    | '/clients'
    | '/reservation'
    | '/treatments'
  id:
    | '__root__'
    | '/'
    | '/_authed'
    | '/login'
    | '/logout'
    | '/signup'
    | '/dev/'
    | '/_authed/clients/$id'
    | '/_authed/clients/new'
    | '/_authed/customers/$id'
    | '/_authed/record/new'
    | '/_authed/reservation/$id'
    | '/_authed/reservation/new'
    | '/_authed/treatments/$id'
    | '/_authed/treatments/new'
    | '/_authed/clients/'
    | '/_authed/reservation/'
    | '/_authed/treatments/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthedRoute: typeof AuthedRouteWithChildren
  LoginRoute: typeof LoginRoute
  LogoutRoute: typeof LogoutRoute
  SignupRoute: typeof SignupRoute
  DevIndexRoute: typeof DevIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthedRoute: AuthedRouteWithChildren,
  LoginRoute: LoginRoute,
  LogoutRoute: LogoutRoute,
  SignupRoute: SignupRoute,
  DevIndexRoute: DevIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_authed",
        "/login",
        "/logout",
        "/signup",
        "/dev/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_authed": {
      "filePath": "_authed.tsx",
      "children": [
        "/_authed/clients/$id",
        "/_authed/clients/new",
        "/_authed/customers/$id",
        "/_authed/record/new",
        "/_authed/reservation/$id",
        "/_authed/reservation/new",
        "/_authed/treatments/$id",
        "/_authed/treatments/new",
        "/_authed/clients/",
        "/_authed/reservation/",
        "/_authed/treatments/"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/logout": {
      "filePath": "logout.tsx"
    },
    "/signup": {
      "filePath": "signup.tsx"
    },
    "/dev/": {
      "filePath": "dev/index.tsx"
    },
    "/_authed/clients/$id": {
      "filePath": "_authed/clients/$id.tsx",
      "parent": "/_authed"
    },
    "/_authed/clients/new": {
      "filePath": "_authed/clients/new.tsx",
      "parent": "/_authed"
    },
    "/_authed/customers/$id": {
      "filePath": "_authed/customers/$id.tsx",
      "parent": "/_authed"
    },
    "/_authed/record/new": {
      "filePath": "_authed/record/new.tsx",
      "parent": "/_authed"
    },
    "/_authed/reservation/$id": {
      "filePath": "_authed/reservation/$id.tsx",
      "parent": "/_authed"
    },
    "/_authed/reservation/new": {
      "filePath": "_authed/reservation/new.tsx",
      "parent": "/_authed"
    },
    "/_authed/treatments/$id": {
      "filePath": "_authed/treatments/$id.tsx",
      "parent": "/_authed"
    },
    "/_authed/treatments/new": {
      "filePath": "_authed/treatments/new.tsx",
      "parent": "/_authed"
    },
    "/_authed/clients/": {
      "filePath": "_authed/clients/index.tsx",
      "parent": "/_authed"
    },
    "/_authed/reservation/": {
      "filePath": "_authed/reservation/index.tsx",
      "parent": "/_authed"
    },
    "/_authed/treatments/": {
      "filePath": "_authed/treatments/index.tsx",
      "parent": "/_authed"
    }
  }
}
ROUTE_MANIFEST_END */
